#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState

from markers import *
from lab5functions import *

if __name__ == '__main__':
    
    rospy.init_node("testForwardKine")
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    bmarker = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['base__link01','link01__link02', 'link02__link03', 'link03__link04', 'link04__link05', 'link05__link06', 'link06__gripper']
    # Joint Configuration
    #q = np.array([0, 0, 0, 0, 0, 0, 0])
    q = np.array([0.16, 0.28, -0.31, -0.22, -0.67, -0.85, -0.58]) # la articulacion q4 va de [-0.95 a 0], no positivos

    # End effector with respect to the base
    T = fkine_kr20(q)
    print("q: " + str(q))
    print( np.round(T, 3) )
    bmarker.position(T)

    # Object (message) whose type is JointState
    jstate = JointState()
    # Set values to the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q

    # Loop rate (in Hz)
    rate = rospy.Rate(100)
    # Continuous execution loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        # Wait for the next iteration
        rate.sleep()

