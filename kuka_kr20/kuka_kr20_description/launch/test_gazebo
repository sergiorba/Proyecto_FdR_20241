#!/usr/bin/env python3
import time
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
import numpy as np
pi=np.pi

if __name__ == '__main__':
    
  rospy.init_node("test1", disable_signals=True)

  robot_client = actionlib.SimpleActionClient('/kr20/kr20_joint_controller/follow_joint_trajectory', FollowJointTrajectoryAction)

  print("Waiting for server...")
  robot_client.wait_for_server()
  print("Connected to server")

  joint_names = ['base__link01','link01__link02', 'link02__link03', 'link03__link04', 'link04__link05', 'link05__link06', 'link06__gripper']
  Q0 = [0, 0, 0, 0, 0, 0, 0]
  QA = [0.16, 0.28, -0.31, -0.22, 0.67, 0.85, -0.58]
  QB = [0.5, -pi/2, 0.5, -0.5, -pi/2, pi/2, 0]
   
  g = FollowJointTrajectoryGoal()
  g.trajectory = JointTrajectory()
  g.trajectory.joint_names = joint_names

  # Initial position
  g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*7,time_from_start=rospy.Duration(2.0))]
  robot_client.send_goal(g)
  robot_client.wait_for_result()
  rospy.sleep(1)
  
  # Mover a la configuración A
  g.trajectory.points = [JointTrajectoryPoint(positions=QA, velocities=[0]*7, time_from_start=rospy.Duration(2.0))]
  robot_client.send_goal(g)
  robot_client.wait_for_result()
  rospy.sleep(1)

  # Mover a la configuración B
  g.trajectory.points = [JointTrajectoryPoint(positions=QB, velocities=[0]*7, time_from_start=rospy.Duration(2.0))]
  robot_client.send_goal(g)
  robot_client.wait_for_result()
  rospy.sleep(1)
  
  robot_client.cancel_goal()
